(ns simulation.algorithms.markov.l-3-states
  (:use clj-predicates.core))

(defn l0 [[p0 p1 p2] [[c00 c01 c02]
                      [c10 c11 c12]
                      [c20 c21 c22]]
          [m0 m1 m2]]
  {:pre [(number? p0)
         (number? p1)
         (number? p2)
         (number? c00)
         (number? c01)
         (number? c02)
         (number? c10)
         (number? c11)
         (number? c12)
         (number? c20)
         (number? c21)
         (number? c22)
         (number? m0)
         (number? m1)
         (number? m2)]
   :post [(number? %)]}
  (/ (+ (+ (* p0 (- (+ (+ (+ (+ (* m2 (- (- (+ (* m1 (- (* p12 p21) (* p11 p22))) (* p11 p22)) p22) (* p12 p21))) p22) (* p11 (- 1 p22))) (* m1 (- (* p11 (- p22 1)) (* p12 p21)))) (* p12 p21)) 1)) (* p10 (- (+ (+ (* m2 (+ (- (* m1 (- (* p1 p22) (* p2 p21))) (* p1 p22)) (* p2 p21))) (* p1 (- p22 1))) (* m1 (+ (* p1 (- 1 p22)) (* p2 p21)))) (* p2 p21)))) (* (- (- (+ (+ (* m2 (+ (+ (- (* m1 (- (* p11 p2) (* p1 p12))) (* p11 p2)) p2) (* p1 p12))) (* m1 (- (* p1 p12) (* p11 p2)))) (* p11 p2)) p2) (* p1 p12)) p20)) (- (+ (+ (+ (+ (+ (+ (+ (* p00 (+ (- (+ (+ (- (+ (* m2 (+ (+ (- (+ (* m1 (- (+ (* m0 (- (* p12 p21) (* p11 p22))) (* p11 p22)) (* p12 p21))) (* m0 (- (- (* p11 p22) p22) (* p12 p21)))) (* p11 p22)) p22) (* p12 p21))) (* m0 (- (+ (+ p22 (* p11 (- 1 p22))) (* p12 p21)) 1))) p22) (* p11 (- p22 1))) (* m1 (+ (+ (* p11 (- 1 p22)) (* m0 (- (* p11 (- p22 1)) (* p12 p21)))) (* p12 p21)))) (* p12 p21)) 1)) (* p10 (+ (+ (+ (+ (* m2 (- (+ (+ (* m1 (+ (- (* m0 (- (* p01 p22) (* p02 p21))) (* p01 p22)) (* p02 p21))) (* m0 (- (* p02 p21) (* p01 p22)))) (* p01 p22)) (* p02 p21))) (* p01 (- 1 p22))) (* m1 (- (+ (* p01 (- p22 1)) (* m0 (+ (* p01 (- 1 p22)) (* p02 p21)))) (* p02 p21)))) (* m0 (- (* p01 (- p22 1)) (* p02 p21)))) (* p02 p21)))) (* m2 (- (- (+ (* m1 (- (* p12 p21) (* p11 p22))) (* p11 p22)) p22) (* p12 p21)))) p22) (* p11 (- 1 p22))) (* m1 (- (* p11 (- p22 1)) (* p12 p21)))) (* p12 p21)) (* (+ (- (+ (+ (+ (* m2 (- (+ (- (+ (* m1 (- (+ (* m0 (- (* p02 p11) (* p01 p12))) (* p01 p12)) (* p02 p11))) (* m0 (+ (- (* p01 p12) (* p02 p11)) p02))) (* p01 p12)) (* p02 p11)) p02)) (* m1 (+ (- (* m0 (- (* p01 p12) (* p02 p11))) (* p01 p12)) (* p02 p11)))) (* m0 (- (+ (* (* -1 p01) p12) (* p02 p11)) p02))) (* p01 p12)) (* p02 p11)) p02) p20)) 1)))
; ((p0 * (m2 * (m1 * (p12 * p21 - p11 * p22) + p11 * p22 - p22 - p12 * p21) + p22 + p11 * (1 - p22) + m1 * (p11 * (p22 - 1) - p12 * p21) + p12 * p21 - 1) + p10 * (m2 * (m1 * (p1 * p22 - p2 * p21) - p1 * p22 + p2 * p21) + p1 * (p22 - 1) + m1 * (p1 * (1 - p22) + p2 * p21) - p2 * p21) + (m2 * (m1 * (p11 * p2 - p1 * p12) - p11 * p2 + p2 + p1 * p12)   + m1 * (p1 * p12 - p11 * p2) + p11 * p2 - p2 - p1 * p12) * p20) / (p00 * (m2 * (m1 * (m0 * (p12 * p21 - p11 * p22) + p11 * p22 - p12 * p21) + m0 * (p11 * p22 - p22 - p12 * p21) - p11 * p22 + p22 + p12 * p21) + m0 * (p22 + p11 * (1 - p22) + p12 * p21 - 1) - p22 + p11 * (p22 - 1) + m1 * (p11 * (1 - p22) + m0 * (p11 * (p22 - 1) - p12 * p21) + p12 * p21) - p12 * p21 + 1) + p10 * (m2 * (m1 * (m0 * (p01 * p22 - p02 * p21) - p01 * p22 + p02 * p21) + m0 * (p02 * p21 - p01 * p22) + p01 * p22 - p02 * p21) + p01 * (1 - p22) + m1 * (p01 * (p22 - 1) + m0 * (p01 * (1 - p22) + p02 * p21) - p02 * p21) + m0 * (p01 * (p22 - 1) - p02 * p21) + p02 * p21) + m2 * (m1 * (p12 * p21 - p11 * p22) + p11 * p22 - p22 - p12 * p21) + p22 + p11 * (1 - p22) + m1 * (p11 * (p22 - 1) - p12 * p21) + p12 * p21 + (m2 * (m1 * (m0 * (p02 * p11 - p01 * p12) + p01 * p12 - p02 * p11) + m0 * (p01 * p12 - p02 * p11 + p02) - p01 * p12 + p02 * p11 - p02) + m1 * (m0 * (p01 * p12 - p02 * p11) - p01 * p12 + p02 * p11) + m0 * (-1 * p01 * p12 + p02 * p11 - p02) + p01 * p12 - p02 * p11 + p02) * p20 - 1))

(defn l1 [[p0 p1 p2] [[c00 c01 c02]
                      [c10 c11 c12]
                      [c20 c21 c22]]
          [m0 m1 m2]]
  {:pre [(number? p0)
         (number? p1)
         (number? p2)
         (number? c00)
         (number? c01)
         (number? c02)
         (number? c10)
         (number? c11)
         (number? c12)
         (number? c20)
         (number? c21)
         (number? c22)
         (number? m0)
         (number? m1)
         (number? m2)]
   :post [(number? %)]}
  (/ (+ (- (+ (+ (+ (* p00 (+ (+ (+ (* m2 (- (+ (* m0 (- (* p2 p21) (* p1 p22))) (* p1 p22)) (* p2 p21))) (* p1 (- 1 p22))) (* m0 (- (* p1 (- p22 1)) (* p2 p21)))) (* p2 p21))) (* p0 (- (+ (+ (* m2 (+ (- (* m0 (- (* p01 p22) (* p02 p21))) (* p01 p22)) (* p02 p21))) (* p01 (- p22 1))) (* m0 (+ (* p01 (- 1 p22)) (* p02 p21)))) (* p02 p21)))) (* m2 (- (* p2 p21) (* p1 p22)))) (* p1 (- p22 1))) (* p2 p21)) (* (+ (- (+ (* m2 (- (+ (* m0 (- (* p02 p1) (* p01 p2))) (* p01 p2)) (* p02 p1))) (* m0 (- (* p01 p2) (* p02 p1)))) (* p01 p2)) (* p02 p1)) p20)) (- (+ (+ (+ (+ (+ (+ (+ (* p00 (+ (- (+ (+ (- (+ (* m2 (+ (+ (- (+ (* m1 (- (+ (* m0 (- (* p12 p21) (* p11 p22))) (* p11 p22)) (* p12 p21))) (* m0 (- (- (* p11 p22) p22) (* p12 p21)))) (* p11 p22)) p22) (* p12 p21))) (* m0 (- (+ (+ p22 (* p11 (- 1 p22))) (* p12 p21)) 1))) p22) (* p11 (- p22 1))) (* m1 (+ (+ (* p11 (- 1 p22)) (* m0 (- (* p11 (- p22 1)) (* p12 p21)))) (* p12 p21)))) (* p12 p21)) 1)) (* p10 (+ (+ (+ (+ (* m2 (- (+ (+ (* m1 (+ (- (* m0 (- (* p01 p22) (* p02 p21))) (* p01 p22)) (* p02 p21))) (* m0 (- (* p02 p21) (* p01 p22)))) (* p01 p22)) (* p02 p21))) (* p01 (- 1 p22))) (* m1 (- (+ (* p01 (- p22 1)) (* m0 (+ (* p01 (- 1 p22)) (* p02 p21)))) (* p02 p21)))) (* m0 (- (* p01 (- p22 1)) (* p02 p21)))) (* p02 p21)))) (* m2 (- (- (+ (* m1 (- (* p12 p21) (* p11 p22))) (* p11 p22)) p22) (* p12 p21)))) p22) (* p11 (- 1 p22))) (* m1 (- (* p11 (- p22 1)) (* p12 p21)))) (* p12 p21)) (* (+ (- (+ (+ (+ (* m2 (- (+ (- (+ (* m1 (- (+ (* m0 (- (* p02 p11) (* p01 p12))) (* p01 p12)) (* p02 p11))) (* m0 (+ (- (* p01 p12) (* p02 p11)) p02))) (* p01 p12)) (* p02 p11)) p02)) (* m1 (+ (- (* m0 (- (* p01 p12) (* p02 p11))) (* p01 p12)) (* p02 p11)))) (* m0 (- (+ (* (* -1 p01) p12) (* p02 p11)) p02))) (* p01 p12)) (* p02 p11)) p02) p20)) 1)))
; ((p00 * (m2 * (m0 * (p2 * p21 - p1 * p22) + p1 * p22 - p2 * p21) + p1 * (1 - p22) + m0 * (p1 * (p22 - 1) - p2 * p21) + p2 * p21) + p0 * (m2 * (m0 * (p01 * p22 - p02 * p21) - p01 * p22 + p02 * p21) + p01 * (p22 - 1) + m0 * (p01 * (1 - p22) + p02 * p21) - p02 * p21) + m2 * (p2 * p21 - p1 * p22) + p1 * (p22 - 1) - p2 * p21 + (m2 * (m0 * (p02 * p1 - p01 * p2) + p01 * p2 - p02 * p1) + m0 * (p01 * p2 - p02 * p1) - p01 * p2 + p02 * p1) * p20) / (p00 * (m2 * (m1 * (m0 * (p12 * p21 - p11 * p22) + p11 * p22 - p12 * p21) + m0 * (p11 * p22 - p22 - p12 * p21) - p11 * p22 + p22 + p12 * p21) + m0 * (p22 + p11 * (1 - p22) + p12 * p21 - 1) - p22 + p11 * (p22 - 1) + m1 * (p11 * (1 - p22) + m0 * (p11 * (p22 - 1) - p12 * p21) + p12 * p21) - p12 * p21 + 1) + p10 * (m2 * (m1 * (m0 * (p01 * p22 - p02 * p21) - p01 * p22 + p02 * p21) + m0 * (p02 * p21 - p01 * p22) + p01 * p22 - p02 * p21) + p01 * (1 - p22) + m1 * (p01 * (p22 - 1) + m0 * (p01 * (1 - p22) + p02 * p21) - p02 * p21) + m0 * (p01 * (p22 - 1) - p02 * p21) + p02 * p21) + m2 * (m1 * (p12 * p21 - p11 * p22) + p11 * p22 - p22 - p12 * p21) + p22 + p11 * (1 - p22) + m1 * (p11 * (p22 - 1) - p12 * p21) + p12 * p21 + (m2 * (m1 * (m0 * (p02 * p11 - p01 * p12) + p01 * p12 - p02 * p11) + m0 * (p01 * p12 - p02 * p11 + p02) - p01 * p12 + p02 * p11 - p02) + m1 * (m0 * (p01 * p12 - p02 * p11) - p01 * p12 + p02 * p11) + m0 * (-1 * p01 * p12 + p02 * p11 - p02) + p01 * p12 - p02 * p11 + p02) * p20 - 1))

(defn l2 [[p0 p1 p2] [[c00 c01 c02]
                      [c10 c11 c12]
                      [c20 c21 c22]]
          [m0 m1 m2]]
  {:pre [(number? p0)
         (number? p1)
         (number? p2)
         (number? c00)
         (number? c01)
         (number? c02)
         (number? c10)
         (number? c11)
         (number? c12)
         (number? c20)
         (number? c21)
         (number? c22)
         (number? m0)
         (number? m1)
         (number? m2)]
   :post [(number? %)]}
  (/ (* -1 (+ (+ (+ (- (+ (+ (* p00 (- (- (+ (+ (* m1 (+ (- (* m0 (- (* p11 p2) (* p1 p12))) (* p11 p2)) (* p1 p12))) (* m0 (+ (+ (* (* -1 p11) p2) p2) (* p1 p12)))) (* p11 p2)) p2) (* p1 p12))) (* p10 (+ (- (+ (* m1 (- (+ (* m0 (- (* p02 p1) (* p01 p2))) (* p01 p2)) (* p02 p1))) (* m0 (- (* p01 p2) (* p02 p1)))) (* p01 p2)) (* p02 p1)))) (* m1 (- (* p11 p2) (* p1 p12)))) (* p11 p2)) p2) (* p0 (+ (- (+ (+ (* m1 (+ (- (* m0 (- (* p01 p12) (* p02 p11))) (* p01 p12)) (* p02 p11))) (* m0 (- (+ (* (* -1 p01) p12) (* p02 p11)) p02))) (* p01 p12)) (* p02 p11)) p02))) (* p1 p12))) (- (+ (+ (+ (+ (+ (+ (+ (* p00 (+ (- (+ (+ (- (+ (* m2 (+ (+ (- (+ (* m1 (- (+ (* m0 (- (* p12 p21) (* p11 p22))) (* p11 p22)) (* p12 p21))) (* m0 (- (- (* p11 p22) p22) (* p12 p21)))) (* p11 p22)) p22) (* p12 p21))) (* m0 (- (+ (+ p22 (* p11 (- 1 p22))) (* p12 p21)) 1))) p22) (* p11 (- p22 1))) (* m1 (+ (+ (* p11 (- 1 p22)) (* m0 (- (* p11 (- p22 1)) (* p12 p21)))) (* p12 p21)))) (* p12 p21)) 1)) (* p10 (+ (+ (+ (+ (* m2 (- (+ (+ (* m1 (+ (- (* m0 (- (* p01 p22) (* p02 p21))) (* p01 p22)) (* p02 p21))) (* m0 (- (* p02 p21) (* p01 p22)))) (* p01 p22)) (* p02 p21))) (* p01 (- 1 p22))) (* m1 (- (+ (* p01 (- p22 1)) (* m0 (+ (* p01 (- 1 p22)) (* p02 p21)))) (* p02 p21)))) (* m0 (- (* p01 (- p22 1)) (* p02 p21)))) (* p02 p21)))) (* m2 (- (- (+ (* m1 (- (* p12 p21) (* p11 p22))) (* p11 p22)) p22) (* p12 p21)))) p22) (* p11 (- 1 p22))) (* m1 (- (* p11 (- p22 1)) (* p12 p21)))) (* p12 p21)) (* (+ (- (+ (+ (+ (* m2 (- (+ (- (+ (* m1 (- (+ (* m0 (- (* p02 p11) (* p01 p12))) (* p01 p12)) (* p02 p11))) (* m0 (+ (- (* p01 p12) (* p02 p11)) p02))) (* p01 p12)) (* p02 p11)) p02)) (* m1 (+ (- (* m0 (- (* p01 p12) (* p02 p11))) (* p01 p12)) (* p02 p11)))) (* m0 (- (+ (* (* -1 p01) p12) (* p02 p11)) p02))) (* p01 p12)) (* p02 p11)) p02) p20)) 1)))
; (-1 * (p00 * (m1 * (m0 * (p11 * p2 - p1 * p12) - p11 * p2 + p1 * p12) + m0 * (-1 * p11 * p2 + p2 + p1 * p12) + p11 * p2 - p2 - p1 * p12) + p10 * (m1 * (m0 * (p02 * p1 - p01 * p2) + p01 * p2 - p02 * p1) + m0 * (p01 * p2 - p02 * p1) - p01 * p2 + p02 * p1) + m1 * (p11 * p2 - p1 * p12) - p11 * p2 + p2 + p0 * (m1 * (m0 * (p01 * p12 - p02 * p11) - p01 * p12 + p02 * p11) + m0 * (-1 * p01 * p12 + p02 * p11 - p02) + p01 * p12 - p02 * p11 + p02) + p1 * p12) / (p00 * (m2 * (m1 * (m0 * (p12 * p21 - p11 * p22) + p11 * p22 - p12 * p21) + m0 * (p11 * p22 - p22 - p12 * p21) - p11 * p22 + p22 + p12 * p21) + m0 * (p22 + p11 * (1 - p22) + p12 * p21 - 1) - p22 + p11 * (p22 - 1) + m1 * (p11 * (1 - p22) + m0 * (p11 * (p22 - 1) - p12 * p21) + p12 * p21) - p12 * p21 + 1) + p10 * (m2 * (m1 * (m0 * (p01 * p22 - p02 * p21) - p01 * p22 + p02 * p21) + m0 * (p02 * p21 - p01 * p22) + p01 * p22 - p02 * p21) + p01 * (1 - p22) + m1 * (p01 * (p22 - 1) + m0 * (p01 * (1 - p22) + p02 * p21) - p02 * p21) + m0 * (p01 * (p22 - 1) - p02 * p21) + p02 * p21) + m2 * (m1 * (p12 * p21 - p11 * p22) + p11 * p22 - p22 - p12 * p21) + p22 + p11 * (1 - p22) + m1 * (p11 * (p22 - 1) - p12 * p21) + p12 * p21 + (m2 * (m1 * (m0 * (p02 * p11 - p01 * p12) + p01 * p12 - p02 * p11) + m0 * (p01 * p12 - p02 * p11 + p02) - p01 * p12 + p02 * p11 - p02) + m1 * (m0 * (p01 * p12 - p02 * p11) - p01 * p12 + p02 * p11) + m0 * (-1 * p01 * p12 + p02 * p11 - p02) + p01 * p12 - p02 * p11 + p02) * p20 - 1))


(def ls [l0 l1 l2])

(defn calculate [p c m]
  {:pre [(coll? p)
         (coll? c)
         (coll? m)]
   :post [(coll? %)]}
  [(l0 p c m)
   (l1 p c m)
   (l2 p c m)])

